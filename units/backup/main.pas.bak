{
*************************************************************************
  CoYOT(e) - the simple and lightweight time tracking tool              *
  Copyright (C) 2014  Philip MÃ¤rksch and the CoYOT(e)-team              *
                                                                        *
  This program is free software: you can redistribute it and/or modify  *
  it under the terms of the GNU General Public License as published by  *
  the Free Software Foundation, either version 3 of the License, or     *
  (at your option) any later version.                                   *
                                                                        *
  This program is distributed in the hope that it will be useful,       *
  but WITHOUT ANY WARRANTY; without even the implied warranty of        *
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
  GNU General Public License for more details.                          *
                                                                        *
  You should have received a copy of the GNU General Public License     *
  along with this program.  If not, see http://www.gnu.org/licenses/    *
                                                                        *
*************************************************************************

This is a programme I made for myself, to help me have an overview on
working times and vacation days. Primarily I did this, because I wanted
to get comfortable with Lazarus, so the use of the programme was not the
significant goal. I just wanted to learn stuff.

Sorry for any German in the code, I may have mixed it up sometimes ;)
Also my English is a bastard mix of British and American - Philos
}

// Todo:
// * database commit and download
// * save all people and lists in one file
// * implement new saving function.

// # some pictures/icons in the popup menus are not properly shown on Linux Version!! - Lazarus Bug?

unit main;

{$mode objfpc}{$H+}
interface

uses
  Classes, SysUtils, FileUtil, RTTIGrids, RTTICtrls, Forms, Controls, Dialogs,
  ComCtrls, DBCtrls, EditBtn, Grids, Menus, StdCtrls, ExtCtrls, Buttons,
  ActnList, IBConnection, DateUtils, INIFiles, TypInfo,
  { own Forms }
  WeekEditForm, WeekAddForm, about, DBConnectForm, PersonEditForm, SettingsForm,
  { own Units }
  workdays, funcs, CoyoteDefaults, people;

type

  { TForm1 }

  TForm1 = class(TForm)
    ComboBox1: TComboBox;
    ComboBox2: TComboBox;
    IBConnection1: TIBConnection;
    ImageList1: TImageList;
    GroupBox1: TGroupBox;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    MainMenu1: TMainMenu;
    MenuItem1: TMenuItem;
    MenuDBSettings: TMenuItem;
    MenuItem10: TMenuItem;
    MenuItem12: TMenuItem;
    MenuNew: TMenuItem;
    MenuMove: TMenuItem;
    MenuMoveTop: TMenuItem;
    MenuMoveUp: TMenuItem;
    MenuMoveDown: TMenuItem;
    MenuMoveBottom: TMenuItem;
    MenuSort: TMenuItem;
    MenuItem17: TMenuItem;
    MenuItem18: TMenuItem;
    PopupAddPeriod: TMenuItem;
    PopupEditPeriod: TMenuItem;
    PopupRemovePeriod: TMenuItem;
    MenuItem5: TMenuItem;
    MenuStatistics: TMenuItem;
    MenuOpenRecent: TMenuItem;
    MenuDBDownload: TMenuItem;
    MenuDBUpload: TMenuItem;
    MenuSettings: TMenuItem;
    MenuLanguage: TMenuItem;
    MenuEnglish: TMenuItem;
    MenuGerman: TMenuItem;
    MenuManual: TMenuItem;
    MenuSaveAs: TMenuItem;
    MenuLoad: TMenuItem;
    MenuQuickSave: TMenuItem;
    MenuColorTheme: TMenuItem;
    MenuItem2: TMenuItem;
    MenuItem21: TMenuItem;
    MenuItem22: TMenuItem;
    MenuPeople: TMenuItem;
    MenuItem3: TMenuItem;
    MenuItem4: TMenuItem;
    MenuQuit: TMenuItem;
    MenuAbout: TMenuItem;
    MenuItem9: TMenuItem;
    PopupMenu1: TPopupMenu;
    ToolButton1: TToolButton;
    ToolButton10: TToolButton;
    ToolButton2: TToolButton;
    ToolButton3: TToolButton;
    ToolButton5: TToolButton;
    ToolButton6: TToolButton;
    ToolButton7: TToolButton;
    ToolButton8: TToolButton;
    ToolButton9: TToolButton;
    UsersList: TPopupMenu;
    StatusBar1: TStatusBar;
    StringGrid1: TStringGrid;
    ToolBar1: TToolBar;
    AddWeekButton: TToolButton;
    EditWeekButton: TToolButton;
    ToolButton4: TToolButton;

    procedure AddWeek(Sender: TObject);
    procedure ComboBox1Select(Sender: TObject);
		procedure ComboBox2Select(Sender: TObject);
    procedure EditButtonClick(Sender: TObject);
    procedure FormActivate(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: boolean);
    procedure FormDestroy(Sender: TObject);
    procedure MenuAboutClick(Sender: TObject);
    procedure ColorThemeClick(Sender: TObject);
    procedure MenuDatabaseClick(Sender: TObject);
    procedure MenuEnglishClick(Sender: TObject);
    procedure MenuGermanClick(Sender: TObject);
    procedure MenuLoadClick(Sender: TObject);
    procedure MenuNewClick(Sender: TObject);
    procedure MenuPeopleClick(Sender: TObject);
    procedure MenuQuickSaveClick(Sender: TObject);
    procedure MenuSaveClick(Sender: TObject);
    procedure MenuSettingsClick(Sender: TObject);
    procedure RemoveSelected(Sender: TObject);
    procedure RemoveAll(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure MenuQuitClick(Sender: TObject);
    procedure MoveClick(Sender: TObject);
    procedure SelectWeek(Sender: TObject; aCol, aRow: integer; var CanSelect: boolean);
    procedure ToolButton10Click(Sender: TObject);

  private
    { private declarations }
    FWeekList: TWeekList;         // List of Weeks shown in the StringGrid
    FPersonList: TPersonList;
    FSelectionIndex: integer;     // Index of the Week that was selected in the grid
    FPersonIndex: integer;        // Index of the person selected - maybe change to string?
    FPeriodIndex: Integer;

    FOSName: string;              // The Internal Name for the used Operating System
    //FLanguage: string;            // Language chosen by User - default is English
    FLanguageID: string;

    AboutForm: TForm2;            // The Window showing information about CoYOT(e)
    EditWeekForm: TForm3;         // The window that you can edit a week with
    AddWeekForm: TForm4;          // A window to add a new week to the "data base"
    DBForm: TForm6;               // The window to connect to the firebird database
    PersonForm: TForm5;           // Window showing personal information
    EditSettingsForm: TForm7;     // The settings "menu"

    //FCurrentUser: Integer;      // ID of the currently selected "User"/Person
    FCurrentFilePath: string;     // If known - Name of the currently opened File
    FOpenRecent: TStringList;     // The files that have been opened lately - will be in ini file
    FCanSave: boolean;            // True, if changes have been made to the file

    // triggered when a week is added
    procedure AddWeekToList(Sender: TObject; AWeek: TWorkWeek; EditAfterwards: boolean);

    // triggered when a week got edited
    procedure AssignWeek(Sender: TObject; AWeek: TWorkWeek; Index: integer);

    // triggered when a Form wants a specific week
    procedure GetWeek(Sender: TObject; Index: integer);

    // triggered when a certain week is deleted
    procedure RemoveWeekFromList(Sender: TObject; AIndex: integer);

    // Merges two weeks and by default deletes the second one afterwards
    procedure MergeWeeks(Sender: TObject; AIndex1, AIndex2: integer; DeleteFirst: boolean = False);

    // Checks for each button, wether it has to get enabled or disabled
    procedure EnableButtons;

    // Updates the Information shown
    procedure UpdateWindow;

    // Clears all values like filename etc..
    procedure Clear;

    procedure TranslateCaptions;

    // Load the values from ini file
    procedure LoadIniFile;
    procedure SaveIniFile;

    procedure LoadFile(FileName: String);

    // apply a color to the theme
    procedure ApplyColor(AColor: integer);

    // adds a filename to the recent files-list and adds it to the mainmenu
    procedure AddToOpenRecent(AFilePath: string; AList: TStringList; AMenuItem: TMenuItem);
    procedure OpenRecentCLick(Sender: TObject);  // dynamic onClick-Event for Recent Files

  public
    { public declarations }
  end;

var
  Form1: TForm1;

implementation

{$R *.lfm}

{ TForm1 }

procedure TForm1.FormCreate(Sender: TObject);
begin
  FOSName := 'unknown';  // for those poor guys using Minix, BSD, Solaris and such things ;)
  // detectable OS
  {$IFDEF macos}
  FOSName := 'MacOS';    // for those poor guys with the little penis ;)
  {$ENDIF}
  {$IFDEF mswindows}
  FOSName := 'Windows';  // for those poor guys with the little brain ;)
  {$ENDIF}
  {$IFDEF linux}
  FOSName := 'Linux';    // for those poor guys with the huge brain and the monstrous penis ;)
  {$ENDIF}

  self.Caption := ProgrammeName + '  ' + VersionNr + ' - UNDER CONSTRUCTION';
  // Create Instances
  FWeekList := TWeekList.Create;
  FPersonList := TPersonList.Create;
  FOpenRecent := TStringList.Create;

  Clear;

  // Sub-Forms
  AboutForm := TForm2.Create(self);
  EditWeekForm := TForm3.Create(self);
  AddWeekForm := TForm4.Create(self);
  DBForm := TForm6.Create(self);
  PersonForm := TForm5.Create(self);
  EditSettingsForm := TForm7.Create(self);

  AboutForm.Label1.Caption := 'Version: ' + VersionNr + ' ( ' + FOSName + ' )';
  AboutForm.Label2.Caption := 'Build Date: ' + VersionDate;

  // Handling events that come from the subforms
  AddWeekForm.OnApplyClick := @AddWeekToList;           // assign event of the add-form
  EditWeekForm.OnRemoveClick := @RemoveWeekFromList;    // assign event for deletion
  EditWeekForm.OnApplyClick := @AssignWeek;             // assign event for applying changes to week
  EditWeekForm.OnNextWeekClick := @GetWeek;             // switch to specified week via Index
  EditWeekForm.OnMergeWeeksClick := @MergeWeeks;        // assign the merge event of the EditWeekForm to merge function

  LoadIniFile;
  TranslateCaptions;   // automatically updates the window

  // Constraints
  self.Constraints.MinWidth := Groupbox1.Width;
  self.Constraints.MinHeight := round(Groupbox1.Width / 2);

  if (FOpenRecent.Count > 0) and option_openLatestFile then
  begin
    loadFile(FOpenRecent[FOPenRecent.Count-1]);
  end;

end;

procedure TForm1.Clear;
begin
  FSelectionIndex := -1;
  FPeriodIndex := 0;
  FPersonIndex := 0;
  FCurrentFilePath := '';
  FCanSave := False;
  FWeekList.Clear;
  FPersonList.Clear;
  StringGrid1.Clear;

  FPersonList.add(TPerson.Create);
  FPersonList.Items[0].FirstName := 'User1';
  FPersonList.Items[0].FamilyName := '';
  FPersonList.Items[0].TimeData.Add(TWeekList.Create);
  updateWindow;
end;

procedure TForm1.FormDestroy(Sender: TObject);
begin
  AboutForm.Free;
  EditWeekForm.Free;
  AddWeekForm.Free;
  PersonForm.Free;
  EditSettingsForm.Free;
  DBForm.Free;
  FWeekList.Free;
  FPersonList.Free;
end;

procedure TForm1.SelectWeek(Sender: TObject; aCol, aRow: integer; var CanSelect: boolean);
begin
  if (StringGrid1.RowCount > 1) and canSelect then
  begin
    FSelectionIndex := aRow - 1;
  end;
end;

procedure TForm1.ToolButton10Click(Sender: TObject);
begin
  PersonForm.Show;
end;

procedure TForm1.AddWeek(Sender: TObject);
begin
  AddWeekForm.Visible := True;
  AddWeekForm.Show;
end;

procedure TForm1.ComboBox1Select(Sender: TObject);
begin
  if (ComboBox1.Items.Count > 0) then
  begin
    FPersonIndex := ComboBox1.ItemIndex;
  end
  else
  begin
    FPersonIndex := -1;
  end;

  StatusBar1.Panels[0].Text := ComboBox1.Items[FPersonIndex];
  updateWindow;
end;

procedure TForm1.ComboBox2Select(Sender: TObject);
begin
  if (FPersonIndex >= 0) and (ComboBox2.ItemIndex >= 0) then
  begin
    // I hope this line keeps us from rewriting all the places where FWeekList
    // is involved
    FWeekList := FPersonList[FPersonIndex].TimeData[ComboBox2.ItemIndex];
	end;
  updateWindow;
end;

procedure TForm1.MergeWeeks(Sender: TObject; AIndex1, AIndex2: integer; DeleteFirst: boolean = False);
var
  I: integer;
begin
  if DeleteFirst then
  begin
    swap(AIndex1, AIndex2);
  end;
  for I := 0 to FWeekList.Items[AIndex2].Days.Count - 1 do
  begin
    // calling the copy-constructor
    FWeekList.Items[AIndex1].Days.Add(FWeekList.Items[AIndex2].Days[I]);
    FWeekList.Items[AIndex1].WeekLength := FWeekList.Items[AIndex1].WeekLength + 1;
  end;
  FWeekList.Delete(AIndex2);
  FCanSave := True;
  updateWindow;
end;

procedure TForm1.AssignWeek(Sender: TObject; AWeek: TWorkWeek; Index: integer);
begin
  FWeekList.Items[Index].Assign(AWeek);
  WeeksToComboBox(EditWeekForm.ComboBox1, FweekList);
  WeeksToComboBox(EditWeekForm.ComboBox2, FweekList);
  EditWeekForm.ComboBox1.ItemIndex := EditWeekForm.WeekIndex;
  FCanSave := True;
  updateWindow;
end;

procedure TForm1.EditButtonClick(Sender: TObject);
begin
  if (FweekList.Count > 0) and (FSelectionIndex >= 0) then
  begin
    if (FWeekList.Count > 1) then
    begin
      EditWeekForm.ButtonLeft.Enabled := True;
      EditWeekForm.ButtonRight.Enabled := True;
    end
    else
    begin
      EditWeekForm.ButtonLeft.Enabled := False;
      EditWeekForm.ButtonRight.Enabled := False;
    end;
    EditWeekForm.showWeek(FWeekList.Items[FSelectionIndex], FSelectionIndex);
    EditWeekForm.Visible := True;
    WeeksToComboBox(EditWeekForm.ComboBox1, FweekList);
    WeeksToComboBox(EditWeekForm.ComboBox2, FweekList);
    EditWeekForm.ComboBox1.ItemIndex := FSelectionIndex;
  end;
end;

procedure TForm1.FormActivate(Sender: TObject);
begin
  UpdateWindow;
end;

procedure TForm1.getWeek(Sender: TObject; Index: integer);
begin
  if (FWeekList.Count > 0) then
  begin
    if (Index >= FWeekList.Count) then
    begin
      Index := 0;
    end;
    if (Index < 0) then
    begin
      Index := FWeekList.Count - 1;
    end;
    EditWeekForm.showWeek(FWeekList.Items[Index], Index);
    EditWeekForm.ComboBox1.ItemIndex := EditWeekForm.WeekIndex;
    EditWeekForm.ComboBox2.ItemIndex := 0;
  end;
end;

procedure TForm1.RemoveSelected(Sender: TObject);
begin
  if (FSelectionIndex >= 0) then
  begin
    if (MessageDlg(txtCaptionDelete, txtDeleteMsg, mtConfirmation, [mbYes, mbNo], 0) = mrYes) then
    begin
      FWeekList.Delete(FSelectionIndex);
      FSelectionIndex := -1;
      FCanSave := True;
    end;
    updateWindow;
  end;
end;

procedure TForm1.RemoveAll(Sender: TObject);
begin
  if (FWeekList.Count > 0) then
  begin
    if (MessageDlg(txtCaptionDelete, txtDeleteAllMsg, mtConfirmation, [mbYes, mbNo], 0) = mrYes) then
    begin
      FWeekList.Clear;
      updateWindow;
      FCanSave := True;
    end;
  end;
end;

procedure TForm1.AddWeekToList(Sender: TObject; AWeek: TWorkWeek; EditAfterwards: boolean);
begin
  FWeekList.Add(AWeek);
  updateWindow;
  FCanSave := True;
  EnableButtons;
  if EditAfterwards then
  begin
    FSelectionIndex := FWeekList.Count - 1;
    EditButtonClick(self);
  end;
end;

procedure TForm1.RemoveWeekFromList(Sender: TObject; AIndex: integer);
begin
  if (AIndex >= 0) and (AIndex < FWeekList.Count) then
  begin
    FWeekList.Delete(AIndex);
    updateWindow;
    FCanSave := True;
  end;
end;

procedure TForm1.MenuAboutClick(Sender: TObject);
begin
  AboutForm.Visible := True;
end;

procedure TForm1.ColorThemeClick(Sender: TObject);
var
  colorDlg: TColorDialog;
begin
  colorDlg := TColorDialog.Create(nil);
  try
    colorDlg.Color := Toolbar1.Color;
    if colorDlg.Execute then
    begin
      ApplyColor(colorDlg.Color);
    end;
  finally
    colorDlg.Free;
  end;
end;

procedure TForm1.MenuDatabaseClick(Sender: TObject);
begin
  DBForm.Show;
end;

procedure TForm1.MenuEnglishClick(Sender: TObject);
begin
  FLanguageID := 'en';
  LoadFromLanguageFile('../languages/en.lang');
  translateCaptions;
  //updateWindow;
end;

procedure TForm1.MenuGermanClick(Sender: TObject);
begin
  FLanguageID := 'de';
  LoadFromLanguageFile('../languages/de.lang');
  translateCaptions;
  //updateWindow;
end;

procedure TForm1.MenuLoadClick(Sender: TObject);
var
  OpenDlg: TOpenDialog;
begin
  OpenDlg := TOpenDialog.Create(self);
  OpenDlg.Title := mcOpen;
  try
    OpenDlg.InitialDir := '../data/';
    OpenDlg.DoFolderChange;
    if OpenDlg.Execute then
    begin
      loadFile(OpenDlg.FileName);
    end;
  finally
    OpenDlg.Free;
    FCanSave := False;
    updateWindow;
  end;
end;

procedure TForm1.LoadFile(FileName: String);
begin
  if loadFromFile(FileName, FWeekList) then
  begin
    StatusBar1.Panels[0].Text := '"' + ExtractFileName(FileName) + '" loaded!';
    FCurrentFilePath := FileName;
    AddToOpenRecent(FCurrentFilePath, FOpenRecent, MenuOpenRecent);
  end
  else
  begin
    StatusBar1.Panels[0].Text := '"' + ExtractFileName(FileName) + '" could not be loaded!';
    FCurrentFilePath := '';
  end;
end;

procedure TForm1.MenuNewClick(Sender: TObject);
begin
  Clear;
  Statusbar1.Panels[0].Text := txtNewFile;
  UpdateWindow;
end;

procedure TForm1.MenuPeopleClick(Sender: TObject);
begin
  PersonForm.Show;
end;

procedure TForm1.MenuQuickSaveClick(Sender: TObject);
begin
  if (FCurrentFilePath <> '') then
  begin
    SaveToFile(FCurrentFilePath, FWeekList);
    AddToOpenRecent(FCurrentFilePath, FOpenRecent, MenuOpenRecent);
    StatusBar1.Panels[0].Text := txtFileSaved;
    FCanSave := False;
    EnableButtons;
  end
  else
  begin
    MenuSaveClick(nil);
  end;
end;

procedure TForm1.MenuSaveClick(Sender: TObject);
var
  SaveDlg: TSaveDialog;
begin
  SaveDlg := TSaveDialog.Create(self);
  SaveDlg.InitialDir := '../data/';
  SaveDlg.DoFolderChange;
  SaveDlg.FileName := 'test user.sav';
  SaveDlg.Options := [ofOverwritePrompt];
  SaveDlg.Title := mcSaveAs;
  try
    if SaveDlg.Execute then
    begin
      SaveToFile(SaveDlg.FileName, FWeekList);
      AddToOpenRecent(SaveDlg.FileName, FOpenRecent, MenuOpenRecent);
      StatusBar1.Panels[0].Text := txtFileSaved;
      FCurrentFilePath := SaveDlg.FileName;
    end;
  finally
    SaveDlg.Free;
    FCanSave := False;
    EnableButtons;
  end;
end;

procedure TForm1.MenuSettingsClick(Sender: TObject);
begin
  EditSettingsForm.Visible := True;
  EditSettingsForm.StringGrid1.Cells[1, 1] := FloatToStr(defHoursPerDay);
  EditSettingsForm.StringGrid1.Cells[1, 2] := FloatToStr(defPausePerDay);
  EditSettingsForm.StringGrid1.Cells[1, 3] := FloatToStr(defHoursUntilPause);

  EditSettingsForm.ColorButton1.ButtonColor := colorMarkedDays;
  EditSettingsForm.ColorButton2.ButtonColor := colorVacationDays;
  EditSettingsForm.CheckBox1.Checked := option_openLatestFile;
end;

procedure TForm1.MenuQuitClick(Sender: TObject);
begin
  if FCanSave then
  begin
    if (MessageDlg(txtQuitProgramme, txtQuitMsg, mtConfirmation, [mbYes, mbNo], 0) = mrYes) then
    begin
      MenuQuickSaveClick(nil);
      SaveIniFile;
      Application.Terminate;
    end
    else
    begin
      SaveIniFile;
      Application.Terminate;
    end;
  end
  else
  begin
    SaveIniFile;
    Application.Terminate;
  end;
end;

procedure TForm1.FormCloseQuery(Sender: TObject; var CanClose: boolean);
begin
  if FCanSave then
  begin
    if (MessageDlg(txtQuitProgramme, txtQuitMsg, mtConfirmation, [mbYes, mbNo], 0) = mrYes) then
    begin
      MenuQuickSaveClick(nil);
      SaveIniFile;
      CanClose := True;
    end
    else
    begin
      SaveIniFile;
      CanClose := True;
    end;
  end
  else
  begin
    SaveIniFile;
    CanClose := True;
  end;
end;

procedure TForm1.SaveIniFile;
var
  INI: TINIFile;
  I: integer;
  fs: TFormatSettings;
begin
  fs.DecimalSeparator := '.';

  INI := TINIFile.Create('coyote.ini');

  if (self.WindowState <> wsMaximized) then
  begin
    INI.WriteString('MainForm', 'xpos', IntToStr(self.Left));
    INI.WriteString('MainForm', 'ypos', IntToStr(self.Top));
    INI.WriteString('MainForm', 'width', IntToStr(self.Width));
    INI.WriteString('MainForm', 'height', IntToStr(self.Height));
  end;
  INI.WriteString('MainForm', 'state', GetEnumName(TypeInfo(TWindowState), integer(self.WindowState)));

  INI.WriteString('EditWeekForm', 'xpos', IntToStr(EditWeekForm.Left));
  INI.WriteString('EditWeekForm', 'ypos', IntToStr(EditWeekForm.Top));
  INI.WriteString('EditWeekForm', 'width', IntToStr(EditWeekForm.Width));
  INI.WriteString('EditWeekForm', 'height', IntToStr(EditWeekForm.Height));
  INI.WriteString('EditWeekForm', 'state', GetEnumName(TypeInfo(TWindowState), integer(EditWeekForm.WindowState)));

  INI.WriteString('DBInfo', 'hostname', DBForm.LabeledEdit1.Text);
  INI.WriteString('DBInfo', 'port', DBForm.LabeledEdit2.Text);
  INI.WriteString('DBInfo', 'dbname', DBForm.LabeledEdit5.Text);
  INI.WriteString('DBInfo', 'user', DBForm.LabeledEdit3.Text);

  INI.WriteString('SettingsForm', 'xpos', IntToStr(EditSettingsForm.Left));
  INI.WriteString('SettingsForm', 'ypos', IntToStr(EditSettingsForm.Top));
  INI.WriteString('SettingsForm', 'width', IntToStr(EditSettingsForm.Width));
  INI.WriteString('SettingsForm', 'height', IntToStr(EditSettingsForm.Height));
  INI.WriteString('SettingsForm', 'state', GetEnumName(TypeInfo(TWindowState), integer(EditSettingsForm.WindowState)));

  INI.WriteString('Defaults', 'HoursUntilPause', FloatToStr(defHoursUntilPause, fs));
  INI.WriteString('Defaults', 'HoursPerDay', FloatToStr(defHoursPerDay, fs));
  INI.WriteString('Defaults', 'PausePerDay', FloatToStr(defPausePerDay, fs));
  INI.WriteString('Defaults', 'ColorMarkedDays', IntToStr(colorMarkedDays));
  INI.WriteString('Defaults', 'ColorVacationDays', IntToStr(colorVacationDays));
  INI.WriteString('Defaults', 'Language', FLanguageID);

  // Recent Files
  INI.WriteString('RecentFiles', 'open_latest', BoolToStr(option_openLatestFile));
  INI.WriteString('RecentFiles', 'count', IntToStr(FOpenRecent.Count));
  for I := 0 to FOpenRecent.Count - 1 do
  begin
    INI.WriteString('RecentFiles', IntToStr(I), FOpenRecent[I]);
  end;

  // grid column sizes
  for I := 0 to EditWeekForm.WeekGrid.ColCount - 1 do
  begin
    INI.WriteString('EditWeekForm', 'col' + IntToStr(I + 1), IntToStr(EditWeekForm.WeekGrid.Columns.Items[I].Width));
  end;
  for I := 0 to EditSettingsForm.StringGrid1.ColCount - 1 do
  begin
    INI.WriteString('SettingsForm', 'col' + IntToStr(I + 1), IntToStr(EditSettingsForm.StringGrid1.ColWidths[I]));
  end;
  for I := 0 to StringGrid1.ColCount - 1 do
  begin
    INI.WriteString('MainForm', 'col' + IntToStr(I + 1), IntToStr(StringGrid1.Columns.Items[I].Width));
  end;

  INI.WriteString('Theme', 'color', IntToStr(Toolbar1.Color));
  INI.Free;
end;

procedure TForm1.LoadIniFile;
var
  INI: TINIFile;
  s: string;
  I: integer;
  fs: TFormatSettings;
begin
  fs.DecimalSeparator := '.';
  INI := TINIFile.Create('coyote.ini');

  s := INI.ReadString('MainForm', 'state', GetEnumName(TypeInfo(TWindowState), integer(wsNormal)));
  self.WindowState := TWindowState(GetEnumValue(TypeInfo(TWindowState), s));
  if (self.WindowState <> wsMaximized) then
  begin
    self.Left := StrToInt(INI.ReadString('MainForm', 'xpos', IntToStr(self.Left)));
    self.Top := StrToInt(INI.ReadString('MainForm', 'ypos', IntToStr(self.Top)));
    self.Width := StrToInt(INI.ReadString('MainForm', 'width', IntToStr(self.Width)));
    self.Height := StrToInt(INI.ReadString('MainForm', 'height', IntToStr(self.Height)));
  end;

  EditWeekForm.Left := StrToInt(INI.ReadString('EditWeekForm', 'xpos', IntToStr(self.Left)));
  EditWeekForm.Top := StrToInt(INI.ReadString('EditWeekForm', 'ypos', IntToStr(self.Top)));
  EditWeekForm.Width := StrToInt(INI.ReadString('EditWeekForm', 'width', IntToStr(self.Width)));
  EditWeekForm.Height := StrToInt(INI.ReadString('EditWeekForm', 'height', IntToStr(self.Height)));
  s := INI.ReadString('EditWeekForm', 'state', GetEnumName(TypeInfo(TWindowState), integer(wsNormal)));
  EditWeekForm.WindowState := TWindowState(GetEnumValue(TypeInfo(TWindowState), s));

  DBForm.LabeledEdit1.Text := INI.ReadString('DBInfo', 'hostname', '');
  DBForm.LabeledEdit2.Text := INI.ReadString('DBInfo', 'port', dbDefaultFirebirdPort);
  DBForm.LabeledEdit5.Text := INI.ReadString('DBInfo', 'dbname', '');
  DBForm.LabeledEdit3.Text := INI.ReadString('DBInfo', 'user', dbDefaultFirebirdUser);

  EditSettingsForm.Left := StrToInt(INI.ReadString('SettingsForm', 'xpos', IntToStr(EditSettingsForm.Left)));
  EditSettingsForm.Top := StrToInt(INI.ReadString('SettingsForm', 'ypos', IntToStr(EditSettingsForm.Top)));
  EditSettingsForm.Width := StrToInt(INI.ReadString('SettingsForm', 'width', IntToStr(EditSettingsForm.Width)));
  EditSettingsForm.Height := StrToInt(INI.ReadString('SettingsForm', 'height', IntToStr(EditSettingsForm.Height)));
  s := INI.ReadString('SettingsForm', 'state', GetEnumName(TypeInfo(TWindowState), integer(wsNormal)));
  EditSettingsForm.WindowState := TWindowState(GetEnumValue(TypeInfo(TWindowState), s));

  defHoursUntilPause := StrToFloat(INI.ReadString('Defaults', 'HoursUntilPause',
    FloatToStr(defHoursUntilPause, fs)), fs);
  defHoursPerDay := StrToFloat(INI.ReadString('Defaults', 'HoursPerDay', FloatToStr(defHoursPerDay, fs)), fs);
  defPausePerDay := StrToFloat(INI.ReadString('Defaults', 'PausePerDay', FloatToStr(defPausePerDay, fs)), fs);
  colorMarkedDays := StrToInt(INI.ReadString('Defaults', 'ColorMarkedDays', IntToStr(colorMarkedDays)));
  colorVacationDays := StrToInt(INI.ReadString('Defaults', 'ColorVacationDays', IntToStr(colorVacationDays)));
  FLanguageID := INI.ReadString('Defaults', 'Language', defLanguageID);

  option_openLatestFile := StrToBool(INI.ReadString('RecentFiles', 'open_Latest', BoolToStr(option_openLatestFile)));
  for I := 0 to StrToInt(INI.ReadString('RecentFiles', 'count', '0')) - 1 do
  begin
    AddToOpenRecent(INI.ReadString('RecentFiles', IntToStr(I), ''), FOpenRecent, MenuOpenRecent);
  end;
  for I := 0 to EditWeekForm.WeekGrid.ColCount - 1 do
  begin
    EditWeekForm.WeekGrid.Columns.Items[I].Width :=
      StrToInt(INI.ReadString('EditWeekForm', 'col' + IntToStr(I + 1),
      IntToStr(EditWeekForm.WeekGrid.Columns.Items[I].Width)));
  end;
  for I := 0 to EditSettingsForm.StringGrid1.ColCount - 1 do
  begin
    EditSettingsForm.StringGrid1.ColWidths[I] :=
      StrToInt(INI.ReadString('SettingsForm', 'col' + IntToStr(I + 1),
      IntToStr(EditSettingsForm.StringGrid1.ColWidths[I])));
  end;
  for I := 0 to StringGrid1.ColCount - 1 do
  begin
    StringGrid1.Columns.Items[I].Width :=
      StrToInt(INI.ReadString('MainForm', 'col' + IntToStr(I + 1), IntToStr(StringGrid1.Columns.Items[I].Width)));
  end;

  if (FLanguageID <> 'en') then
  begin
    loadFromLanguageFile('../languages/' + FLanguageID + '.lang');
    translateCaptions;
  end;

  ApplyColor(StrToInt(INI.ReadString('Theme', 'color', IntToStr(defToolbarColor))));
  INI.Free;

end;

procedure TForm1.ApplyColor(AColor: integer);
begin
  Toolbar1.Color := AColor;
  EditWeekForm.ToolBar1.Color := AColor;
  PersonForm.Toolbar1.Color := AColor;
end;

procedure TForm1.UpdateWindow;
var
  I: integer;
  sum: double;
  goal: double;
  diff: double;
  vacationdays: double;
  locDay: TWorkDay;
begin
  sum := 0;
  goal := 0;
  diff := 0;
  vacationdays := 0;

  Label1.Caption := txtSum + ':';
  Label2.Caption := txtGoal + ':';
  Label3.Caption := txtDiff + ':';
  Label4.Caption := txtEarliestBegin + ':';
  Label5.Caption := txtLatestLeave + ':';
  Label6.Caption := txtVacation + ':';
  Label7.Caption := txtLongestDay + ':';

  // Person List
  NamesToComboBox(ComboBox1, FPersonList);
  ComboBox1.ItemIndex := FPersonIndex;
  // Timedata List
  if (FPersonIndex >= 0) then
  begin
    WeekListsToComboBox(ComboBox2, FPersonList[FPersonIndex].TimeData);
  end;


  // Statistics on the right
  for I := 0 to FWeekList.Count - 1 do
  begin
    sum += FWeekList.Items[I].getSum;
    goal += FWeekList.Items[I].getGoalHours;
    vacationdays += FWeekList.Items[I].getAmountOfVacation;
  end;

  WeeksToStringGrid(StringGrid1, FWeekList, FSelectionIndex);
  if (FWeekList.Count > 0) then
  begin
    diff := sum - goal;

    Label1.Caption := txtSum + ': ' + FormatFloat('0.00', sum) + ' h';
    Label2.Caption := txtGoal + ': ' + FormatFloat('0.00', goal) + ' h';
    Label3.Caption := txtDiff + ': ' + FormatFloat('0.00', diff) + ' h';
    if (diff >= defHoursPerDay) then
    begin
      Label3.Caption := Label3.Caption + ' (' + FormatFloat('0.00', (diff / defHoursPerDay)) + ' d)';
    end;
    Label6.Caption := txtVacation + ': ' + FormatFloat('0.0', vacationdays) + ' ' + txtDays;
    colorText(Label3, sum, goal, 0.5);
  end;

  if (getDayOfEarliestBegin(FWeekList) <> nil) then
  begin
    locDay := getDayOfEarliestBegin(FWeekList);
    Label4.Caption := txtEarliestBegin + ': ' + locDay.StartTime.ToText +
      //TimeToText(locDay.StartHour, locDay.StartMinute) +
      ' (' + DateToStr(locDay.Date) + ')';
  end;
  if (getDayOfLatestQuitting(FWeekList) <> nil) then
  begin
    locDay := getDayOfLatestQuitting(FWeekList);
    Label5.Caption := txtLatestLeave + ': ' + locDay.EndTime.ToText + //TimeToText(locDay.EndHour, locDay.EndMinute) +
      ' (' + DateToStr(locDay.Date) + ')';
  end;

  if (getLongestDay(FWeekList) <> nil) then
  begin
    locDay := getLongestDay(FWeekList);
    Label7.Caption := txtLongestDay + ': ' + DateToStr(locDay.Date) + ' (' +
      FloatToStr(locDay.getAmountOfTime) + ' h)';
  end;

  EnableButtons;
end;

procedure TForm1.EnableButtons;
begin
  if (FWeekList.Count > 0) then
  begin
    Toolbar1.Buttons[1].Enabled := True;
    Toolbar1.Buttons[2].Enabled := True;
    ToolButton1.Enabled := True;
    EditWeekButton.Enabled := True;
    PopupEditPeriod.Enabled := True;
    PopupRemovePeriod.Enabled := True;
    MenuSaveAs.Enabled := True;
  end
  else
  begin
    Toolbar1.Buttons[1].Enabled := False;
    Toolbar1.Buttons[2].Enabled := False;
    ToolButton1.Enabled := False;
    EditWeekButton.Enabled := False;
    EditWeekButton.Enabled := False;
    PopupEditPeriod.Enabled := False;
    PopupRemovePeriod.Enabled := False;
    MenuSaveAs.Enabled := False;
  end;

  MenuQuickSave.Enabled := FCanSave and (FCurrentFilePath <> '');
  ToolButton1.Enabled := FCanSave and (FCurrentFilePath <> '');
  MenuOpenRecent.Enabled := (MenuOpenRecent.Count > 0);
  MenuMove.Enabled := (FWeekList.Count > 1);

end;


procedure TForm1.AddToOpenRecent(AFilePath: string; AList: TStringList; AMenuItem: TMenuItem);
var
  I: integer;
  found: integer;
begin

  found := -1;

  if (AFilePath <> '') then
  begin
    // delete earlier entries and clear menuitem
    for I := 0 to AList.Count - 1 do
    begin
      if (AList[I] = AFilePath) then
        found := I;
    end;

    if (found >= 0) then
    begin
      AList.Delete(found);
    end;
    AList.Add(AFilePath);

    if (AList.Count > 10) then
    begin
      Alist.Delete(0);
    end;

    AMenuItem.Clear;
    for I := AList.Count - 1 downto 0 do
    begin
      AMenuItem.Add(TMenuItem.Create(nil));
      AMenuItem.Items[AList.Count - 1 - I].Caption := AList[I];
      AMenuItem.Items[AList.Count - 1 - I].OnClick := @OpenRecentCLick;
    end;
  end;
  UpdateWindow;
end;

procedure TForm1.OpenRecentCLick(Sender: TObject);
var
  filename: string;
begin
  filename := TMenuItem(Sender).Caption;

  try
    loadFromFile(filename, FWeekList);
    StatusBar1.Panels[0].Text := '"' + ExtractFileName(filename) + '" loaded!';
    FCurrentFilePath := filename;
    AddToOpenRecent(FCurrentFilePath, FOpenRecent, MenuOpenRecent);
    FCanSave := False;
  except
    on e: Exception do
    begin
      Application.MessageBox(PChar(emFileNotFound), 'File not found', 0);
      FOpenRecent.Delete(FOpenRecent.Count - 1 - MenuOpenRecent.IndexOf(TMenuItem(Sender)));  // Menu is reversed order
      MenuOpenRecent.Delete(MenuOpenRecent.IndexOf(TMenuItem(Sender)));
    end;
  end;

  UpdateWindow;
end;

procedure TForm1.MoveClick(Sender: TObject);
var
  tempIndex: integer;
begin
  if (FWeekList.Count > 1) then
  begin
    tempIndex := FSelectionIndex;
    // Move Item to Top
    if (Sender = MenuMoveTop) then
    begin
      FWeekList.Insert(0, TWorkWeek.Create(FWeekList.Items[FSelectionIndex]));
      FWeekList.Delete(FSelectionIndex + 1);
      tempIndex := 0;
      FCanSave := True;
    end;

    // Move Item to Bottom
    if (Sender = MenuMoveBottom) then
    begin
      FWeekList.Insert(FWeekList.Count, TWorkWeek.Create(FWeekList.Items[FSelectionIndex]));
      FWeekList.Delete(FSelectionIndex);
      tempIndex := FWeekList.Count - 1;
      FCanSave := True;
    end;

    // Move Item 1 step up
    if (Sender = MenuMoveUp) then
    begin
      if (FSelectionIndex >= 1) and (FSelectionIndex < FWeekList.Count) then
      begin
        FWeekList.Insert(FSelectionIndex - 1, TWorkWeek.Create(FWeekList.Items[FSelectionIndex]));
        FWeekList.Delete(FSelectionIndex + 1);
        tempIndex -= 1;
        FCanSave := True;
      end;
    end;

    // Move Item 1 step down
    if (Sender = MenuMoveDown) then
    begin
      if (FSelectionIndex >= 0) and (FSelectionIndex < FWeekList.Count - 1) then
      begin
        FWeekList.Insert(FSelectionIndex + 2, TWorkWeek.Create(FWeekList.Items[FSelectionIndex]));
        FWeekList.Delete(FSelectionIndex);
        tempIndex += 1;
        FCanSave := True;
      end;
    end;

    updateWindow;

    // Updating the EditweekForm
    EditWeekForm.showWeek(FWeekList.Items[tempIndex], tempIndex);
    EditWeekForm.WeekIndex := tempIndex;
    WeeksToCombobox(EditWeekForm.ComboBox1, FWeekList);
    WeeksToCombobox(EditWeekForm.ComboBox2, FWeekList);
    EditWeekForm.ComboBox1.ItemIndex := tempIndex;
    EditWeekForm.ComboBox2.ItemIndex := tempIndex;
  end;
end;


procedure TForm1.TranslateCaptions;
begin

  // Main Menu
  MenuItem1.Caption := mcFile;
  MenuItem2.Caption := mcEdit;
  MenuItem5.Caption := mcShow;
  MenuItem3.Caption := mcDatabase;
  MenuItem9.Caption := mcOptions;
  MenuItem4.Caption := mcHelp;

  MenuNew.Caption := mcNew;
  MenuSaveAs.Caption := mcSaveAs;
  MenuQuickSave.Caption := mcSave;
  MenuLoad.Caption := mcOpen;
  MenuOpenRecent.Caption := mcOpenRecent;
  MenuQuit.Caption := mcExit;

  MenuPeople.Caption := mcPeople;
  MenuStatistics.Caption := mcStatistics;
  MenuDBSettings.Caption := mcDatabaseSettings;
  MenuDBDownload.Caption := mcDatabaseDownload;
  MenuDBUpload.Caption := mcDatabaseUpload;
  MenuSettings.Caption := mcProgrammeSettings;
  MenuColorTheme.Caption := mcColorTheme;
  MenuLanguage.Caption := mcLanguage;
  MenuManual.Caption := mcManual;
  MenuAbout.Caption := mcAbout;

  // Buttons
  EditWeekForm.ApplyButton.Caption := bcApply;
  EditSettingsForm.ApplyButton.Caption := bcApply;
  PersonForm.ApplyButton.Caption := bcApply;
  AddWeekForm.ApplyButton.Caption := bcApply;

  EditWeekForm.BackButton.Caption := bcBack;
  EditSettingsForm.BackButton.Caption := bcBack;
  PersonForm.BackButton.Caption := bcBack;
  DBForm.BackButton.Caption := bcBack;
  AddWeekForm.BackButton.Caption := bcBack;

  DBForm.ResetButton.Caption := bcReset;
  EditSettingsForm.ResetButton.Caption := bcReset;

  // form-Captions
  AboutForm.Caption := mcAbout;
  EditSettingsForm.Caption := mcProgrammeSettings;
  AboutForm.PageControl1.Pages[0].Caption := mcAbout;
  PersonForm.Caption := mcPeople;
  DBForm.Caption := mcDatabaseSettings;

  GroupBox1.Caption := txtSummary;
  EditWeekForm.GroupBox1.Caption := txtSummary;

  // StringGrid
  StringGrid1.Columns.Items[1].Title.Caption := txtPeriod;
  StringGrid1.Columns.Items[2].Title.Caption := txtDays;
  StringGrid1.Columns.Items[3].Title.Caption := txtSum;
  StringGrid1.Columns.Items[4].Title.Caption := txtGoal;
  StringGrid1.Columns.Items[5].Title.Caption := txtDiff;

  EditWeekForm.WeekGrid.Columns.Items[5].Title.Caption := txtVacation;
  EditWeekForm.WeekGrid.Columns.Items[6].Title.Caption := txtSum;
  EditWeekForm.WeekGrid.Columns.Items[7].Title.Caption := txtDiff;

  updateWindow;
  Groupbox1.Repaint;
  EditWeekForm.UpdateWindow;
end;

end.
